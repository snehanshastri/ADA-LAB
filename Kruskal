#include <stdio.h>

int count = 0;
int i, j, u, v, k = 0, min, sum = 0;
int t[10][10], cost[10][10];
int p[10], d[10];

void kruskal(int cost[10][10], int n);
int find(int i);
void union1(int i, int j);

void main() {
    int n;
    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the cost adjacency matrix:\n");
    for(i = 0; i < n; i++) {
        for(j = 0; j < n; j++) {
            scanf("%d", &cost[i][j]);
            if(cost[i][j] == 0) {
                cost[i][j] = 999; 
            }
        }
    }

    kruskal(cost, n);

    printf("The edges in the minimum spanning tree are:\n");
    for(i = 0; i < k; i++) {
        printf("(%d, %d)\n", t[i][0], t[i][1]);
    }
    printf("Minimum cost: %d\n", sum);
}

void kruskal(int cost[10][10], int n) {
    for(int i = 0; i < n; i++) {
        p[i] = i;
    }

    while(count < n - 1) {
        min = 999;
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(cost[i][j] < min) {
                    min = cost[i][j];
                    u = i;
                    v = j;
                }
            }
        }
        
        if(find(u) != find(v)) {
            t[k][0] = u;
            t[k][1] = v;
            k++;
            count++;
            sum += min;
            union1(u, v);
        }
        cost[u][v] = cost[v][u] = 999; 
    }
}

int find(int i) {
    while(p[i] != i) {
        i = p[i];
    }
    return i;
}

void union1(int i, int j) {
    int a = find(i);
    int b = find(j);
    p[a] = b;
}

//Output:
Enter the number of vertices: 4
Enter the cost adjacency matrix:
0 1 5 2
1 0 9999 9999
5 9999 0 3
2 9999 3 0
The edges in the minimum spanning tree are:
(0, 1)
(0, 3)
(2, 3)
Minimum cost: 6
