#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

#define MAXN 20

int p[MAXN]; // permutation
int pi[MAXN]; // inverse permutation
int dir[MAXN]; // direction: 1 or -1

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void printPermutation(int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", p[i]);
    }
    printf("\n");
}

void printAllPermutations(int n) {
    for (int i = 0; i < n; i++) {
        p[i] = i + 1;
        pi[i] = i;
        dir[i] = -1;
    }

    printPermutation(n);

    int mobile, mobileIndex;
    bool found;
    while (1) {
        mobile = -1;
        found = false;

        // Find the largest mobile element
        for (int i = 0; i < n; i++) {
            int next = i + dir[i];
            if (next >= 0 && next < n && p[i] > p[next]) {
                if (p[i] > mobile) {
                    mobile = p[i];
                    mobileIndex = i;
                    found = true;
                }
            }
        }

        if (!found) break;

        // Print the next permutation
        int next = mobileIndex + dir[mobileIndex];
        swap(&p[mobileIndex], &p[next]);
        swap(&pi[p[mobileIndex]], &pi[p[next]]);
        swap(&dir[mobileIndex], &dir[next]);
        printPermutation(n);

        // Reverse the direction of all elements larger than the mobile element
        for (int i = 0; i < n; i++) {
            if (p[i] > mobile) {
                dir[i] *= -1;
            }
        }
    }
}

int main() {
    int n;
    printf("Enter the value of n (max 20): ");
    scanf("%d", &n);

    if (n > MAXN || n < 1) {
        printf("Invalid input.\n");
        return 1;
    }

    printAllPermutations(n);

    return 0;
}

//Output:
Enter the value of n (max 20): 3
1 2 3 
1 3 2 
3 1 2 
3 2 1 
2 3 1 
2 1 3 


=== Code Execution Successful ===
